// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/moaton/web-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RevenueService is an autogenerated mock type for the RevenueService type
type RevenueService struct {
	mock.Mock
}

// CreateRevenue provides a mock function with given fields: ctx, revenue
func (_m *RevenueService) CreateRevenue(ctx context.Context, revenue models.Revenue) (int64, error) {
	ret := _m.Called(ctx, revenue)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Revenue) (int64, error)); ok {
		return rf(ctx, revenue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Revenue) int64); ok {
		r0 = rf(ctx, revenue)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Revenue) error); ok {
		r1 = rf(ctx, revenue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRevenue provides a mock function with given fields: ctx, id
func (_m *RevenueService) DeleteRevenue(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRevenueById provides a mock function with given fields: ctx, id
func (_m *RevenueService) GetRevenueById(ctx context.Context, id int64) (models.Revenue, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Revenue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Revenue, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Revenue); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Revenue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevenues provides a mock function with given fields: ctx, limit, offset
func (_m *RevenueService) GetRevenues(ctx context.Context, limit int64, offset int64) ([]models.Revenue, int64, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []models.Revenue
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]models.Revenue, int64, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []models.Revenue); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Revenue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) int64); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64) error); ok {
		r2 = rf(ctx, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRevenue provides a mock function with given fields: ctx, revenue
func (_m *RevenueService) UpdateRevenue(ctx context.Context, revenue models.Revenue) error {
	ret := _m.Called(ctx, revenue)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Revenue) error); ok {
		r0 = rf(ctx, revenue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRevenueService creates a new instance of RevenueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRevenueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RevenueService {
	mock := &RevenueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

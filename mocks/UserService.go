// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/moaton/web-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, email, password
func (_m *UserService) Auth(ctx context.Context, email string, password string) (models.User, error) {
	ret := _m.Called(ctx, email, password)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, User
func (_m *UserService) CreateUser(ctx context.Context, User models.User) (models.User, error) {
	ret := _m.Called(ctx, User)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return rf(ctx, User)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, User)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, User)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, email
func (_m *UserService) DeleteUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *UserService) GetUserById(ctx context.Context, id int64) (models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, User
func (_m *UserService) UpdateUser(ctx context.Context, User models.User) error {
	ret := _m.Called(ctx, User)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, User)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
